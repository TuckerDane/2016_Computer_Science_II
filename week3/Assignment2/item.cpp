#include "item.h"
#include <string>

/***************************************************************************************************
**	default constructor
***************************************************************************************************/
Item::Item()
{
	this->name = "null";
	this->unit = "null";
	this->quantity = 0;
	this->unitPrice = 0;

	//std::cout << "default item created" << std::endl;
}

/***************************************************************************************************
**	constructor taking arguments to pass into the private members of Item
***************************************************************************************************/
Item::Item(std::string n, std::string u, int q, double p)
{
	this->name = n;
	this->unit = u;
	this->quantity = q;
	this->unitPrice = p;
}

/***************************************************************************************************
**	Overload == operator to compare two items
***************************************************************************************************/
bool Item::operator==(const Item& itm)
{
	if ((this->getName() == itm.getName()) && (this->getUnit() == itm.getUnit()) && (this->getUnitPrice() == itm.getUnitPrice()))
	{
		return true;
	}
	else
	{
		return false;
	}
}

/***************************************************************************************************
**	sets the name of the item
***************************************************************************************************/
void Item::setName(std::string n) 
{
	this->name = n;
}

/***************************************************************************************************
**	sets the unit of the item
***************************************************************************************************/
void Item::setUnit(std::string u)
{
	this->unit = u;
}

/***************************************************************************************************
**	sets the quantity of the item
***************************************************************************************************/
void Item::setQuantity(int q)
{
	this->quantity = q;
}

/***************************************************************************************************
**	sets the unit price of the item
***************************************************************************************************/
void Item::setUnitPrice(double p)
{
	this->unitPrice = p;
}

/***************************************************************************************************
**	returns the name of the item
***************************************************************************************************/
std::string Item::getName() const
{
	return this->name;
}

/***************************************************************************************************
**	returns the unit of the item
***************************************************************************************************/
std::string Item::getUnit() const
{
	return this->unit;
}

/***************************************************************************************************
**	returns the quantity
***************************************************************************************************/
int Item::getQuantity()
{
	return this->quantity;
}

/***************************************************************************************************
**	returns the unitPrice
***************************************************************************************************/
double Item::getUnitPrice() const
{
	return this->unitPrice;
}

/***************************************************************************************************
**	finds the extended price of an item given the unitPrice and quantity
***************************************************************************************************/
double Item::extendedPrice()
{
	return (this->unitPrice*this->quantity);
}